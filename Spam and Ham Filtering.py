# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EfiJV17X9-oWz_k4SPn-fliXoUPVLCld

# Spam and Ham Filtering Project
# **Project Overview:**
The Spam and Ham Filtering project aims to develop a machine learning model that can accurately classify incoming messages as either "spam" or "ham" (non-spam). By utilizing the Multinomial Naive Bayes algorithm and text processing techniques, this project focuses on creating an efficient and effective system for filtering unwanted and potentially harmful messages.

# **Project Steps:**

## Data Preprocessing:

The provided dataset is analyzed, which contains messages labeled as either "spam" or "ham."
Descriptive statistics are generated to gain insights into the distribution of spam and ham messages.

## Data Transformation:

A new column, "spam," is created in the dataset by replacing the "spam" and "ham" labels with numerical values (1 for "spam" and 0 for "ham").
The updated dataset is displayed to verify the changes.

## Data Splitting:

The dataset is split into training and testing sets, with 75% used for training and 25% for evaluation.
The messages are separated into input features (X) and the corresponding spam labels (y).

## Feature Extraction:

The CountVectorizer is initialized to transform the text data into a matrix of token counts.
The CountVectorizer is fit on the training data and transforms both the training and testing data.

## Model Training:

A Multinomial Naive Bayes classifier is instantiated.
The classifier is trained using the training data to learn patterns and relationships between the input features and the spam labels.

## Spam and Ham Prediction:

New email messages are created and transformed into token count matrices using the fitted CountVectorizer.
The trained model predicts the class labels (spam or ham) for the new email messages.

## Model Evaluation:

The model's performance is evaluated using a classification report.
The classification report provides precision, recall, F1-score, and support metrics for both the ham and spam classes.

The Spam and Ham Filtering project leverages the Multinomial Naive Bayes algorithm to accurately classify messages as spam or ham. By preprocessing the data, transforming text into numerical features, and training the model, it becomes possible to predict the spam or ham label for new messages. The evaluation metrics from the classification report help assess the model's effectiveness in distinguishing between spam and ham messages.

This project provides a foundation for developing a robust spam filtering system that can be implemented in various applications to reduce the impact of unwanted and potentially harmful messages on users' digital experiences.
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

data = pd.read_csv("spam.csv")
data.head()

data.groupby('Category').describe()

data['spam'] = data['Category'].replace({'spam':1, "ham": 0})

data.head()

X = data['Message'].values
y = data["spam"].values
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.25)

cv = CountVectorizer()
X_train = cv.fit_transform(X_train)
X_test = cv.transform(X_test)

X_train.toarray()

model = MultinomialNB()
model.fit(X_train, y_train)

email = ["Hi Tien. It is great to meet you!"]
email = cv.transform(email)

model.predict(email)

# 0 means ham

email1 = ["Do you want to get a free money.Click to it! reward reward"]
email1 = cv.transform(email1)
model.predict(email1)

from sklearn.metrics import classification_report

y_pred = model.predict(X_test)

print(classification_report(y_pred, y_test))

